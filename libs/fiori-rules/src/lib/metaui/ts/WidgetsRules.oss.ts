/**
 *  This is generated file. Do not edit !!
 *
 *  @formatter:off
 *
 */
/* tslint:disable */
export const WidgetsRulesRule = 'ɵ/**ɵ * @licenseɵ * Copyright 2017 SAP Aribaɵ *ɵ * Licensed under the Apache License, Version 2.0 (the "License");ɵ * you may not use this file except in compliance with the License.ɵ * You may obtain a copy of the License atɵ *ɵ * http://www.apache.org/licenses/LICENSE-2.0ɵ *ɵ * Unless required by applicable law or agreed to in writing, softwareɵ * distributed under the License is distributed on an "AS IS" BASIS,ɵ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.ɵ * See the License for the specific language governing permissions andɵ * limitations under the License.ɵ *ɵ * Based on original work: MetaUI: Craig Federighi (2008)ɵ *ɵ */ɵɵɵfield {ɵ    type  {ɵ       component:StringComponent;ɵ        bindings:{ɵ          value:$value;ɵ          id: ${properties.get("field")};ɵ          placeholder:${properties.get("label")};ɵ        };ɵ    }ɵɵ    type=(boolean, Boolean) {ɵ        editable {ɵ            component:CheckboxComponent;ɵ            bindings:{ɵ              ngModel: $value;ɵ              isBinary:true;ɵ              title:"Yes/No";ɵ            };ɵ        }ɵ        editable=false {ɵ           bindings:{ɵ              isBinary:true;ɵ              title: ${value ? "Yes" : "No"};ɵ           };ɵ        }ɵ    }ɵɵ    type=(Number) {ɵ        editable {ɵ          component:InputComponent;ɵ          canSetType:true;ɵ          bindings:{ɵ             ngModel: $value;ɵ          };ɵ        }ɵ    }ɵɵ    type=Date   {ɵ        editable {ɵ          component:PlatformDatetimePickerComponent;ɵ            bindings:{ɵ              ngModel:$value;ɵ              format:"MM/dd/yyyy";ɵ              displayHours:false;ɵ              displayMinutes:false;ɵ              displaySeconds:false;ɵ          };ɵ        }ɵɵ        editable=false {ɵ            component:DatePickerComponent;ɵ              bindings:{ɵ                value:$value;ɵ                editable:false;ɵ                placeholder:"MM/dd/yyyy";ɵ            };ɵ         }ɵ        fiveZoneLayout = true {}ɵ    }ɵɵ    type=(Array, Set) {ɵ        editable {ɵ           trait:asSelect;ɵ           bindings:{ɵ              noSelectionString:${properties.get("noSelectionString")};ɵ           };ɵ        }ɵ    }ɵɵ    type=(String, string) {ɵ        editable  {ɵ            component:InputComponent;ɵ            bindings:{ɵ               ngModel: $value;ɵ            };ɵ        }ɵ        @trait=longtext {ɵ            after:zBottom;ɵ            editable {ɵ              component:TextAreaComponent;ɵ            }ɵ            operation=(search, list)  { visible:false; }ɵ        }ɵ        trait=truncated { component:TruncateString; bindings:{size:10;}; }ɵ    }ɵɵ    type="Money" {ɵ        component: MoneyComponent;ɵ        bindings:{ɵ            ngModel:$value;ɵ            currencies:${properties.get("currencies")};ɵ        };ɵ    }ɵɵ    @trait=derived {ɵ        editable:false;ɵ        editing { after:zNone; }ɵ    }ɵɵ    @trait=required {ɵ        operation=(edit, create) {ɵ            required:true;ɵ            object {ɵ                valid: ${( value == null || value.length  == 0) ? "Required field": true};ɵ            }ɵ        }ɵ    }ɵɵ    @trait=fluid {ɵ        fluid:true;ɵ    }ɵɵ    @trait=asSelect {ɵ        editable {ɵ            component:SelectComponent;ɵ            bindings:{ɵ                ngModel:$value;ɵ                lookupKey:${properties.get("lookupKey")};ɵ                displayKey:${ meta.displayLabel(type, properties.get("labelField"), true )};ɵ                list:${properties.get("choices")};ɵ            };ɵ        }ɵ    }ɵɵ    @trait=asRadio {ɵ          editable {ɵ              component:RadioGroupComponent;ɵ              bindings:{ɵ                  ngModel:$value;ɵ                  isInline:${properties.get("isInline")};ɵ                  lookupKey:${properties.get("lookupKey")};ɵ                  displayKey:${ meta.displayLabel(type, properties.get("labelField"), true )};ɵ                  list:${properties.get("choices")};ɵ              };ɵ          }ɵ     }ɵɵ    @trait=asAutoComplete {ɵ         editable {ɵ             component:ComboboxComponent;ɵ             bindings:{ɵ                 ngModel:$value;ɵ                 entityClass:${values.get("type")};ɵ                 lookupKey:${properties.get("lookupKey")};ɵ                 displayKey:${ meta.displayLabel(type, properties.get("labelField"), true )};ɵ                 dataSource:${properties.get("dataSource")};ɵ             };ɵ         }ɵ    }ɵɵ    @trait=inlineObject {ɵ        editable=false {ɵ            component:MetaContextComponent;ɵ            bindings: {ɵ                pushNewContext:true;ɵ                group:"inlineObject";ɵ                locale: ${meta.env.locale};ɵ                object:$value;ɵ                layout:Inspect;ɵ                operation:view;ɵ                includeComponent:true;ɵ            };ɵ        }ɵ    }ɵɵ    @trait=noCreate { operation=create { visible:false; } }ɵ    @trait=noSearch { operation=search { visible:false; } }ɵɵɵ    component=(StringComponent,LinkComponent) {ɵ        @trait=bold {ɵ            wrapperComponent:GenericContainerComponent;ɵ            wrapperBindings: { tagName:b; };ɵ        }ɵ        @trait=italic {ɵ            wrapperComponent:GenericContainerComponent;ɵ            wrapperBindings: { tagName:i; };ɵ        }ɵ        @trait=heading1 {ɵ            wrapperComponent:GenericContainerComponent;ɵ            wrapperBindings: { tagName:h1; };ɵ        }ɵ        @trait=heading2 {ɵ            wrapperComponent:GenericContainerComponent;ɵ            wrapperBindings: { tagName:h2; };ɵ        }ɵ        @trait=heading3 {ɵ            wrapperComponent:GenericContainerComponent;ɵ            wrapperBindings: { tagName:h3; };ɵ        }ɵ    }ɵ}ɵɵaction {ɵ @trait=pageAction {ɵ     actionResults:${ properties.get("routeName")  };ɵ }ɵɵ  @trait=messageResults {ɵ      actionResults:${ɵ          m = properties.get("mRef");ɵ          m(object);ɵ      };ɵ  }ɵ}ɵɵgroup=inlineObject class layout {ɵ    trait:noLabelLayout;ɵ}ɵɵɵlayout {ɵ    @trait=InstanceActionButtons {ɵ        visible:true;ɵ        component:MetaActionListComponent;ɵ    }ɵɵ    @trait=ActionButtons {ɵ       visible:true;ɵ       component:MetaActionListComponent;ɵ    }ɵɵ    @trait=Form { visible:true; component:MetaForm; }ɵɵ    @trait=Stack { visible:true; component:MetaElementListComponent; }ɵɵ    component=MetaForm @trait=noLabelLayout;ɵ    layout_trait=noLabelLayout class {ɵ        bindings:{noLabelLayout:true;};ɵ    }ɵ}ɵɵ~class layout=(Inspect, SearchForm) {component:StringComponent; bindings:{value:null; }; }ɵɵɵmodule {ɵ    visible:$${!properties.get("hidden")};ɵ    homePage:"home";ɵ    pageBindings:${properties.get("homePage") == "home" ? new Map().set("module", values.get("module")) : null};ɵ    component:MetaDashboardLayoutComponent;ɵ    layout { visible:true; }ɵɵ    @trait=ActionTOC {ɵ        @layout=Actions {ɵ           label:"Actions";ɵ           component:"MetaActionListComponent";ɵ           after:zToc;ɵ           bindings: {ɵ            renderAs:"links";ɵ           };ɵ        }ɵ    }ɵ}ɵ';
/* tslint:disable */
/**
 *  @formatter:on
 *
 */
 